/*变量*/
$size: 12px;
$color: #fff;
$width: 600px;
/*
    数据类型
    数字：1，1px。。。
    字符串：“foo”，bar
    颜色：blue，#043ar，rgab（0，0，0，1）
    布尔：true，false
    空值：null
    数组list：用空格隔开或者用逗号隔开 1.5em 1em 0 | x,y,z
    对象maps：(key1:value1,key2:value2)
*/
// 1.字符串：使用 #{} 时，会将引号字符串编译为无引号字符串
@mixin firefox-message($selector) {
    body.firefox #{$selector}:before {
        content: "Hi, Firefox users!";
    }
}
@include firefox-message(".header");
// 编译结果 body.firefox .header:before {content: "Hi, Firefox users!"; } 
// 2.数组：1px 2px, 5px 6px || (1px 2px) (5px 6px)
// 3.maps：map-get查找键值；map-merge融合键值；@each遍历键值

/*@media指令*/
$media: screen;
$feature: -webkit-min-device-pixel-ratio;
$value: 1.5;
@media #{$media} and ($feature: $value) {
  .sidebar {
    width: 500px;
  }
}

/*@extend指令*/
// 将一个选择器下的所有样式继承给另一个选择器
.error {
    border: 1px #f00;
    background-color: #fdd;
}
.seriousError {
    @extend .error;
    border-width: 3px;
}

/*控制指令*/
// 1.@if
$type: monster;
p {
    @if $type == ocean {
        color: blue;
    } @else if $type == matador {
        color: red;
    } @else if $type == monster {
        color: green;
    } @else {
        color: black;
    }
}
// 2.@for  格式：@for $var from <start> through <end> || @for $var from <start> to <end>；$var 可以是任何变量，<start> 和 <end> 必须是整数值
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}
// 3.@each 格式：$var in <list>；$var 可以是任何变量名，<list> 是一连串的值，也就是值列表
// 遍历数组
$pngList: puma, sea-slug, egret, salamander;
@each $animal in  $pngList{
    .#{$animal}-icon {
      background-image: url('/images/#{$animal}.png');
    }
}
@each $animal, $color, $cursor in (puma, black, default),
                                  (sea-slug, blue, pointer),
                                  (egret, white, move) {
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
        border: 2px solid $color;
        cursor: $cursor;
    }
}
// 遍历对象 $header为对象的键，$size为对象的值
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
    #{$header} {
        font-size: $size;
    }
}
// 4.@while
$i: 6;
@while $i > 0 {
    .item-#{$i} { width: 2em * $i; }
    $i: $i - 2;
}

/*混合指令*/
// 定义
@mixin large-text {
    font: {
      family: Arial;
      size: 20px;
      weight: bold;
    }
    color: #ff0000;
}
@mixin clearfix ($color, $width: 1px) {//带参数
    display: inline-block;
    &:after {
      content: ".";
      display: block;
      height: 0;
      clear: both;
      visibility: hidden;
      color: $color;
      width: $width;
    }
}
@mixin box-shadow($shadows...) {//多个参数
    -moz-box-shadow: $shadows;
    -webkit-box-shadow: $shadows;
    box-shadow: $shadows;
}
// 引用
// @include large-text;
// @include clearfix;
// @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);

/*函数指令*/
// 定义
@function grid-width($n) {
    @return $n * $grid-width + ($n - 1) * $gutter-width;
}
// 引用
// #sidebar { width: grid-width($n: 5); }

//////////////////
$item: (1,black) (2,green) (3,yellow) (4,red) (5,blue) (6,purple) (7,orange) (8,gray) (9,cyan);
.grid {
    padding: 50px 100px;
    margin-bottom: 100px;
    &Layout {
        background: #fff;
        padding: 20px;
        box-shadow: -1px 10px 16px 1px rgba(0,0,0,0.75);
        -webkit-box-shadow: -1px 10px 16px 1px rgba(0,0,0,0.75);
        -moz-box-shadow: -1px 10px 16px 1px rgba(0,0,0,0.75);
    }
    &Item {
        text-align: center;
        border: 1px solid red;
        // position: absolute;
        // width: 200px;
        // height: 200px;
        font: {
            family: fantasy;
            size: 24px;
            weight: bold;
        }
    }
    @each $index, $color in $item {
        &Item-#{$index} { 
            background: $color;
        }
    }
}